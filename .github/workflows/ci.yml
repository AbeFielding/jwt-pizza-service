name: CI Pipeline

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.set_version.outputs.version }}

    services:
      mysql:
        image: mysql:8.0.29
        env:
          MYSQL_ROOT_PASSWORD: tempdbpassword
          MYSQL_DATABASE: pizza
        ports: [ '3306:3306' ]
        options: >-
          --health-cmd "mysqladmin ping -ptempdbpassword"
          --health-interval 10s
          --health-start-period 10s
          --health-timeout 5s
          --health-retries 10

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '22.x'

      - name: Install dependencies
        run: npm ci

      - name: Lint
        run: npm run lint

      - name: Write config file for tests
        run: |
          cat > src/config.js <<'EOF'
          module.exports = {
            jwtSecret: '${{ secrets.JWT_SECRET }}',
            db: {
              connection: {
                host: '127.0.0.1',
                user: 'root',
                password: 'tempdbpassword',
                database: 'pizza',
                connectTimeout: 60000
              },
              listPerPage: 10
            },
            factory: {
              url: 'https://pizza-factory.cs329.click',
              apiKey: '${{ secrets.FACTORY_API_KEY }}'
            }
          };
          EOF

      - name: Run tests
        run: npm test

      - name: Set version
        id: set_version
        run: |
          version=$(date +'%Y%m%d.%H%M%S')
          echo "version=$version" >> "$GITHUB_OUTPUT"
          printf '{"version": "%s" }' "$version" > version.json

      - name: Update coverage badge
        run: |
          sudo apt-get update && sudo apt-get install -y jq bc curl
          coverage=$(jq '.total.lines.pct' coverage/coverage-summary.json)
          color=$(echo "$coverage < 80" | bc | awk '{if ($1) print "red"; else print "green"}')
          curl -s -X POST "https://pizza-factory.cs329.click/api/badge/${{ secrets.NET_ID }}/jwtpizzaservicecoverage?label=Coverage&value=$coverage%25&color=$color" \
            -H "authorization: bearer ${{ secrets.FACTORY_API_KEY }}"

      - name: Create dist for image
        run: |
          rm -rf dist
          mkdir -p dist/src

          # Dockerfile for ECS image
          cat > dist/Dockerfile <<'DOCKER'
          ARG NODE_VERSION=22
          FROM node:${NODE_VERSION}-alpine
          WORKDIR /usr/src/app

          # Install dependencies
          COPY package*.json ./
          RUN npm ci

          # Copy source code
          COPY . .

          # Expose port and start service
          EXPOSE 80
          CMD ["node","src/service.js","80"]
          DOCKER

          # Copy app source and metadata
          cp -r src dist/
          cp package*.json dist/
          cp version.json dist/ || true

          # Overwrite with production config (RDS host)
          cat > dist/src/config.js <<'EOF'
          module.exports = {
            jwtSecret: '${{ secrets.JWT_SECRET }}',
            db: {
              connection: {
                host: '${{ secrets.DB_HOSTNAME }}',
                user: '${{ secrets.DB_USERNAME }}',
                password: '${{ secrets.DB_PASSWORD }}',
                database: 'pizza',
                connectTimeout: 60000
              },
              listPerPage: 10
            },
            factory: {
              url: 'https://pizza-factory.cs329.click',
              apiKey: '${{ secrets.FACTORY_API_KEY }}'
            }
          };
          EOF

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: package
          path: dist/

  deploy:
    name: Push image to ECR and deploy to ECS
    runs-on: ubuntu-latest
    needs: build
    permissions:
      id-token: write
      contents: read
    env:
      version: ${{ needs.build.outputs.version }}

    steps:
      - name: Download distribution artifact
        uses: actions/download-artifact@v4
        with:
          name: package
          path: package

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          audience: sts.amazonaws.com
          aws-region: us-east-1
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT }}:role/${{ secrets.CI_IAM_ROLE }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up machine emulation (ARM64)
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push container image
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: jwt-pizza-service
        run: |
          docker buildx build \
            --no-cache \  # force rebuild to avoid cached layer with old config
            --platform=linux/amd64,linux/arm64 \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:latest \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:${{ env.version }} \
            --push \
            package

          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:${{ env.version }}" >> $GITHUB_OUTPUT

      - name: Deploy new container to ECS
        run: |
          aws ecs update-service \
            --region us-east-1 \
            --cluster jwt-pizza-service \
            --service jwt-pizza-service \
            --force-new-deployment
